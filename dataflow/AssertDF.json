{
	"name": "AssertDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employee",
						"type": "DatasetReference"
					},
					"name": "Employee"
				},
				{
					"dataset": {
						"referenceName": "dept",
						"type": "DatasetReference"
					},
					"name": "Dept"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "assert1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as short,",
				"          name as string,",
				"          salary as short,",
				"          deptid as short,",
				"          country as string,",
				"          joindate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employee",
				"source(output(",
				"          deptid as string,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dept",
				"Employee derive(newJoinDate = toDate(joindate,'ddMMyyyy')) ~> derivedColumn1",
				"derivedColumn1, Dept assert(expectTrue(!isNull(toDate(joindate,'ddMMyyyy')), false, 'assertdate'),",
				"     expectExists(Employee@deptid == toInteger(Dept@deptid), false, 'assertDept'),",
				"     expectUnique(id, false, 'assertid')) ~> assert1",
				"assert1 split(hasError('assertdate'),",
				"     hasError('assertid'),",
				"     hasError('assertDept'),",
				"     disjoint: false) ~> split1@(assertJoinDate, assertid, assertDept, success)"
			]
		}
	}
}